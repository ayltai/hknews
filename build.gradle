plugins {
    id 'java'
    id 'com.github.ben-manes.versions' version '0.36.0'
    id 'org.sonarqube'                 version '3.1.1'
    id 'com.github.spotbugs'           version '4.6.2'
    id 'checkstyle'
    id 'jacoco'
}

group   'com.github.ayltai'
version '3.3.5'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    jcenter()
}

ext {
    awsSdkVersion          = '1.11.966'
    awsLambdaCoreVersion   = '1.2.1'
    awsLambdaEventsVersion = '3.7.0'
    jacksonVersion         = '2.12.1'
    gsonVersion            = '2.8.6'
    jsonVersion            = '20201115'
    lombokVersion          = '1.18.18'
    spotBugsVersion        = '4.2.1'
    jetBrainsVersion       = '20.1.0'
    junitVersion           = '5.7.1'
    mockitoVersion         = '3.8.0'
}

configurations {
    all {
        resolutionStrategy {
            force "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
            force "com.fasterxml.jackson.dataformat:jackson-databind:$jacksonVersion"
            force "com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:$jacksonVersion"
        }
    }

    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    // AWS SDK libraries
    implementation platform("com.amazonaws:aws-java-sdk-bom:$awsSdkVersion")
    implementation 'com.amazonaws:aws-java-sdk-dynamodb'

    // AWS Lambda libraries
    implementation     "com.amazonaws:aws-lambda-java-core:$awsLambdaCoreVersion"
    implementation     "com.amazonaws:aws-lambda-java-events:$awsLambdaEventsVersion"

    // JSON and XML
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jacksonVersion"
    implementation "com.google.code.gson:gson:$gsonVersion"
    implementation "org.json:json:$jsonVersion"

    // Code generation
    compileOnly             "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor     "org.projectlombok:lombok:$lombokVersion"
    testCompileOnly         "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

    // Utilities
    compileOnly     "com.github.spotbugs:spotbugs-annotations:$spotBugsVersion"
    compileOnly     "org.jetbrains:annotations:$jetBrainsVersion"
    testCompileOnly "org.jetbrains:annotations:$jetBrainsVersion"

    // Unit testing
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly    "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}

//region Checkstyle

checkstyle {
    toolVersion    = '8.40'
    configFile     = file('./checkstyle.xml')
    ignoreFailures = true
    showViolations = true
}

tasks.withType(Checkstyle) {
    source  = 'src/main/java'

    include '**/*.java'
    exclude '**/*Test.java'

    reports {
        xml.enabled      = Boolean.valueOf(System.getenv('CI'))
        html.enabled     = !System.getenv('CI')
        xml.destination  file("$project.buildDir/reports/checkstyle/checkstyle-output.xml")
        html.destination file("$project.buildDir/reports/checkstyle/checkstyle-output.html")
    }
}

//endregion

//region SpotBugs

spotbugs {
    toolVersion.set(spotBugsVersion)
    ignoreFailures.set(true)
    excludeFilter.set(file('./spotbugs-exclude.xml'))

    effort      'max'
    reportLevel 'medium'
}

spotbugsMain {
    reports {
        xml.enabled  = Boolean.valueOf(System.getenv('CI'))
        html.enabled = !System.getenv('CI')
    }
}

//endregion

//region JaCoCo

jacoco {
    toolVersion '0.8.6'
}

jacocoTestReport {
    dependsOn 'test'

    reports {
        xml.enabled  = true
        html.enabled = true
    }
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes                 = [ 'jdk.internal.*', ]
}

//endregion

sonarqube {
    properties {
        property 'sonar.host.url',                    'https://sonarcloud.io'
        property 'sonar.organization',                'ayltai'
        property 'sonar.projectKey',                  'ayltai_hknews'
        property 'sonar.login',                       System.getenv('SONAR_TOKEN')
        property 'sonar.sources',                     'src/main/java,src/main/javascript'
        property 'sonar.tests',                       'src/test/java,src/test/javascript'
        property 'sonar.javascript.lcov.reportPaths', 'coverage/lcov.info'
    }
}

test {
    useJUnitPlatform()

    dependsOn   'startDynamoDbLocal'
    finalizedBy 'stopDynamoDbLocal'
}

Process process

task startDynamoDbLocal {
    group       'test setup'
    description 'Start Amazon DynamoDB Local server'

    def packagePath = "$buildDir/tmp/downloadDynamoDbLocal/dynamodb_local_latest.tar.gz"

    doLast {
        if (!file("$buildDir/tmp/downloadDynamoDbLocal/DynamoDBLocal.jar").exists()) {
            if (!file(packagePath).exists()) {
                file("$buildDir/tmp/downloadDynamoDbLocal").mkdirs()

                new FileOutputStream(packagePath).channel.transferFrom java.nio.channels.Channels.newChannel(new URL('https://s3.ap-southeast-1.amazonaws.com/dynamodb-local-singapore/dynamodb_local_latest.tar.gz').openStream()), 0, Long.MAX_VALUE

                copy {
                    from tarTree(packagePath)
                    into file("$buildDir/tmp/downloadDynamoDbLocal/")
                }
            }
        }

        process = new ProcessBuilder("/usr/bin/java", "-Djava.library.path=$buildDir/tmp/downloadDynamoDbLocal/DynamoDBLocal_lib", "-jar", "$buildDir/tmp/downloadDynamoDbLocal/DynamoDBLocal.jar", "-inMemory").start()
    }
}

task stopDynamoDbLocal {
    group       'test setup'
    description 'Stop Amazon DynamoDB Local server'

    doLast {
        if (process != null) process.destroy()
    }
}

task packageZip(dependsOn : assemble, type : Zip) {
    group       'deploy'
    description 'Package a distributable zip file'

    archiveFileName = 'hknews.zip'
    dirMode         = 0755
    fileMode        = 0644

    from compileJava
    from processResources
    into('lib') {
        from configurations.runtimeClasspath
    }
}
