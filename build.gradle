plugins {
    id 'java'
    id 'com.github.ben-manes.versions'   version '0.36.0'
    id 'org.springframework.boot'        version '2.4.0'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'org.sonarqube'                   version '3.0'
    id 'com.github.spotbugs'             version '4.6.0'
    id 'checkstyle'
    id 'jacoco'
}

group   'com.github.ayltai'
version '3.0.0'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

test {
    useJUnitPlatform()
}

repositories {
    jcenter()
}

ext {
    okHttpVersion       = '4.9.0'
    retrofitVersion     = '2.9.0'
    commonsLang3Version = '3.11'
    jacksonVersion      = '2.12.0'
    logzioVersion       = '1.0.24'
}

dependencies {
    // Spring Boot
    implementation      ('org.springframework.boot:spring-boot-starter-web') {
        exclude group : 'org.springframework.boot', module : 'spring-boot-starter-json'
        exclude group : 'org.springframework.boot', module : 'spring-boot-starter-tomcat'
    }
    implementation      'org.springframework.boot:spring-boot-starter-undertow'
    implementation      'org.springframework.boot:spring-boot-starter-data-mongodb'
    testImplementation  ('org.springframework.boot:spring-boot-starter-test') {
        exclude group : 'org.junit.vintage', module : 'junit-vintage-engine'
    }
    testImplementation  'de.flapdoodle.embed:de.flapdoodle.embed.mongo'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // HTTP networking
    implementation "com.squareup.okhttp3:okhttp:$okHttpVersion"
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-scalars:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-simplexml:$retrofitVersion"

    // Utilities
    implementation "org.apache.commons:commons-lang3:$commonsLang3Version"
    implementation "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
    implementation "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    implementation 'org.json:json:20201115'

    // Logging
    implementation "io.logz.logback:logzio-logback-appender:$logzioVersion"

    // Code generation
    compileOnly         'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
}

//region Checkstyle

checkstyle {
    toolVersion    = '8.38'
    configFile     = rootProject.file('./checkstyle.xml')
    ignoreFailures = true
    showViolations = true
}

tasks.withType(Checkstyle) {
    source  = 'src/main/java'

    include '**/*.java'
    exclude '**/*Test.java'

    reports {
        xml.enabled      = Boolean.valueOf(System.getenv('CI'))
        html.enabled     = !System.getenv('CI')
        xml.destination  file("$project.buildDir/reports/checkstyle/checkstyle-output.xml")
        html.destination file("$project.buildDir/reports/checkstyle/checkstyle-output.html")
    }
}

//endregion

//region SpotBugs

spotbugs {
    toolVersion.set('4.2.0')
    ignoreFailures.set(true)
    excludeFilter.set(file('./spotbugs-exclude.xml'))

    effort      'max'
    reportLevel 'medium'
}

spotbugsMain {
    reports {
        xml.enabled  = Boolean.valueOf(System.getenv('CI'))
        html.enabled = !System.getenv('CI')
    }
}

//endregion

//region JaCoCo

jacoco {
    toolVersion '0.8.6'
}

jacocoTestReport {
    dependsOn 'test'

    reports {
        xml.enabled  = true
        html.enabled = true
    }
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes                 = [ 'jdk.internal.*', ]
}

//endregion

sonarqube {
    properties {
        property 'sonar.host.url',                    'https://sonarcloud.io'
        property 'sonar.organization',                'ayltai'
        property 'sonar.projectKey',                  'ayltai_hknews'
        property 'sonar.login',                       System.getenv('SONAR_TOKEN')
        property 'sonar.sources',                     'src/main/java,src/main/javascript'
        property 'sonar.tests',                       'src/test/java,src/test/javascript'
        property 'sonar.javascript.lcov.reportPaths', 'coverage/lcov.info'
    }
}

//region Tasks

//region Terraform

task downloadTerraform {
    group       'download'
    description 'Downloads Terraform CLI'

    def terraformVersion = '0.13.5'
    def osName           = System.getProperty 'os.name'
    def osArch           = System.getProperty 'os.arch'
    def platform         = osName.startsWith('Windows') ? 'windows' : osName.startsWith('Mac') ? 'darwin' : osName.startsWith('FreeBSD') ? 'freebsd' : osName.startsWith('SunOS') ? 'solaris' : 'linux'
    def architecture     = 'x86' == osArch || 'i386' == osArch ? '386' : 'x86_64' == osArch || 'amd64' == osArch ? 'amd64' : osArch.startsWith('arm') ? 'arm' : 'amd64'
    def url              = "https://releases.hashicorp.com/terraform/${terraformVersion}/terraform_${terraformVersion}_${platform}_${architecture}.zip"

    inputs.property('url', url)
    outputs.file("$buildDir/terraform.zip").withPropertyName('zip')
    outputs.cacheIf { true }

    doLast {
        if (!file("$buildDir/terraform").exists()) {
            buildDir.mkdirs()

            new FileOutputStream("$buildDir/terraform.zip").channel.transferFrom java.nio.channels.Channels.newChannel(new URL(url).openStream()), 0, Long.MAX_VALUE
        }
    }
}

task installTerraform(type : Copy, dependsOn : 'downloadTerraform') {
    group       'installation'
    description 'Installs Terraform CLI'

    inputs.file("$buildDir/terraform.zip").withPropertyName('zip').withPathSensitivity(PathSensitivity.RELATIVE)
    outputs.file("$buildDir/terraform").withPropertyName('terraform')
    outputs.cacheIf { true}

    from zipTree(file("$buildDir/terraform.zip"))
    into buildDir

    doLast {
        exec {
            commandLine 'chmod', '+x', "$buildDir/terraform"
        }
    }
}

task initTerraform(type : Exec, dependsOn : 'installTerraform') {
    group       'build setup'
    description 'Initializes a working directory for Terraform configurations'

    def terraformDir = file("$projectDir/src/main/terraform")

    if (file("$terraformDir/.terraformrc").exists()) environment 'TF_CLI_CONFIG_FILE', "$terraformDir/.terraformrc"

    environment 'TF_IN_AUTOMATION', 'true'
    environment 'TF_WORKSPACE', 'main'
    workingDir  terraformDir
    commandLine "$buildDir/terraform", 'init'
}

task checkTerraform(type : Exec, dependsOn : 'initTerraform') {
    group       'verification'
    description 'Validates Terraform configurations'

    def terraformDir = file("$projectDir/src/main/terraform")

    if (file("$terraformDir/.terraformrc").exists()) environment 'TF_CLI_CONFIG_FILE', "$terraformDir/.terraformrc"

    environment 'TF_IN_AUTOMATION', 'true'
    environment 'TF_WORKSPACE', 'main'
    workingDir  terraformDir
    commandLine "$buildDir/terraform", 'validate'
}

task planTerraform(type : Exec, dependsOn : 'initTerraform') {
    group       'verification'
    description 'Plans for infrastructure changes with Terraform configurations'

    def terraformDir = file("$projectDir/src/main/terraform")

    if (file("$terraformDir/.terraformrc").exists()) environment 'TF_CLI_CONFIG_FILE', "$terraformDir/.terraformrc"

    environment 'TF_IN_AUTOMATION', 'true'
    environment 'TF_WORKSPACE', 'main'
    workingDir  terraformDir
    commandLine "$buildDir/terraform", 'plan', '-lock-timeout=300s', '-var-file=secrets.tfvars'
}

task applyTerraform(type : Exec, dependsOn : 'initTerraform') {
    group       'application'
    description 'Applies infrastructure changes with Terraform configurations'

    def terraformDir = file("$projectDir/src/main/terraform")

    if (file("$terraformDir/.terraformrc").exists()) environment 'TF_CLI_CONFIG_FILE', "$terraformDir/.terraformrc"

    environment 'TF_IN_AUTOMATION', 'true'
    environment 'TF_WORKSPACE', 'main'
    workingDir  terraformDir
    commandLine "$buildDir/terraform", 'apply', '-lock-timeout=300s', '-auto-approve', '-var-file=secrets.tfvars'
}

//endregion

//region Ansible

task installAnsible {
    group       'installation'
    description 'Installs Ansible and dependencies for running Ansible playbooks'

    def ansibleDir = file("$projectDir/src/main/ansible")

    doLast {
        if (!file('/usr/bin/docker').exists()) {
            exec {
                commandLine 'apt-get', 'install', '-y', '--no-install-recommands', 'curl'
            }

            exec {
                commandLine 'curl', '-fsSL', 'https://get.docker.com', '-o', 'get-docker.sh'
            }

            exec {
                commandLine 'sh', 'get-docker.sh'
            }

            delete 'get-docker.sh'
        }

        if (!file('/usr/bin/python3').exists() || !file('/usr/bin/pip3').exists()) {
            exec {
                commandLine 'apt-get', 'install', '-y', '--no-install-recommands', 'python3.8', 'python3-pip'
            }
        }

        if (file("$ansibleDir/requirements.txt").exists()) {
            exec {
                workingDir  ansibleDir
                commandLine 'pip3', 'install', '-r', 'requirements.txt'
            }
        }

        if (file("$ansibleDir/requirements.yml").exists()) {
            exec {
                workingDir  ansibleDir
                commandLine 'ansible-galaxy', 'install', '--roles-path', './.roles', '-r', 'requirements.yml'
            }
        }
    }
}

task testAnsible(dependsOn : 'installAnsible') {
    group       'verification'
    description 'Runs unit tests for Ansible roles'

    doLast {
        file("$projectDir/src/main/ansible/roles")
            .listFiles(new FileFilter() {
                @Override
                boolean accept(final File file) {
                    return new File(file, "molecule").exists()
                }
            })
            .sort()
            .each { role ->
                exec {
                    workingDir  role
                    commandLine 'molecule', 'test'
                }
            }
    }
}

//endregion

//region JavaScript

task installJavaScript(type : Exec) {
    group       'installation'
    description 'Installs dependencies for JavaScript application'

    commandLine 'npm', 'install'
}

task testJavaScript(type : Exec, dependsOn : 'installJavaScript') {
    group       'verification'
    description 'Runs unit tests for JavaScript application'

    commandLine 'npm', 'test'
}

task buildJavaScript(type : Exec, dependsOn : 'installJavaScript') {
    group       'build'
    description 'Builds JavaScript application'

    doFirst {
        delete buildDir
    }

    commandLine 'npm', 'run', 'build'
}

//endregion

//region Java

task checkJava(type : GradleBuild) {
    group       'verification'
    description 'Runs linting tools for Java application'

    tasks = [
        'checkstyleMain',
        'spotbugsMain',
    ]
}

task buildJava {
    group       'build'
    description 'Builds Java application'

    doLast {
        delete "$projectDir/src/main/resources/public/static"
        delete "$projectDir/src/main/resources/public/*.js"

        copy {
            from fileTree("$buildDir/javascript")
            into "$projectDir/src/main/resources/public"
        }
    }
}

bootJar.dependsOn('buildJava')

//endregion

//endregion
